#Common data-generating function

#popsize set at 1500000, can increase in large ssize is needed
#ssize set at 500, may have trouble when not enough patient available

#Defaults (scenario 1) true marg RR =
#OR_C<-3 #effect of vaccine on covid
#OR_WI<-1 #no effect of vaccine on W from other infection
#OR_WC<-5 #effect of vaccine on covid symptoms
#OR_H<-1.5 #effect of vaccine on hospitalization among those with symptoms
#em=0
#true marg RR = 0.04 ; true cond RR = 0.04 ; #ONLY GOOD TO TWO DECIMALS

#Scenario 2: Effect modification of V by C on Infec_COVID
#em=1
#true marg RR = 0.25; true cond RR = 0.23;


datagen<-function(seed=sample(1:1000000,size=1),ssize=500,popsize=1500000,OR_C=3.5,OR_WI=1,OR_WC=5,OR_H=1.5,em=5){
  set.seed(seed)
  #generate data
  C<-runif(n=popsize, -2,2)
  U1<-rbinom(n=popsize,size=1,prob=0.5) #affects both
  U2<-rbinom(n=popsize,size=1,prob=0.5) #affects covid

    V=rep(0,popsize)
    Infec.0<-rbinom(prob=plogis(0.5*C-5+0.5*U1),size=1,n=popsize) #current prevalence around 0.007

    #Infected with COVID
    Infec_COVID.0<- rbinom(prob=plogis( 1-log(OR_C)*V -6 + C+em*V*C+log(3)*U2*(1.5-V)-2*U1), size=1,n=popsize) #0.009

    #symptoms based on infection
    #can come from either or both infections, if present
    W.0=rep(0,popsize)
    W.0[Infec.0==1]<-rbinom(prob=plogis(-4+0.5*C[Infec.0==1]-log(OR_WI)*V[Infec.0==1]-0.5*U1[Infec.0==1]),size=1, n=sum(Infec.0==1))
    W.0[Infec_COVID.0==1]<-rbinom(prob=plogis(-2+1*C[Infec_COVID.0==1]-log(OR_WC)*V[Infec_COVID.0==1]-1*U1[Infec_COVID.0==1]+0.5*U2[Infec_COVID.0==1]*(1-V[Infec_COVID.0==1])),size=1, n=sum(Infec_COVID.0))
    #mean(W[Infec==1|Infec_COVID==1]) #9%
    #mean(W[Infec_COVID==1]) #27%
    #mean(W[Infec==1]) #2%
    #mean(W[Infec_COVID==1&V==1]) #8%

    #hospitalization, only possible if symptoms present
    H.0=rep(0,popsize)
    H.0[W.0==1]<-rbinom(prob=plogis(1.5+0.5*C[W.0==1]+log(OR_H)*V[W.0==1]-0.5*U1[W.0==1]),size=1,n=sum(W.0==1))

    V=rep(1,popsize)
  #Infection (with something) has some common risk factors U1 and C
  Infec<-rbinom(prob=plogis(0.5*C-5+0.5*U1),size=1,n=popsize) #current prevalence around 0.007

  #Infected with COVID
  Infec_COVID<- rbinom(prob=plogis( 1-log(OR_C)*V -6 + C+em*V*C+log(3)*U2*(1.5-V)-2*U1), size=1,n=popsize) #0.009

  #symptoms based on infection
  #can come from either or both infections, if present
  W=rep(0,popsize)
  W[Infec==1]<-rbinom(prob=plogis(-4+0.5*C[Infec==1]-log(OR_WI)*V[Infec==1]-0.5*U1[Infec==1]),size=1, n=sum(Infec==1))
  W[Infec_COVID==1]<-rbinom(prob=plogis(-2+1*C[Infec_COVID==1]-log(OR_WC)*V[Infec_COVID==1]-1*U1[Infec_COVID==1]+0.5*U2[Infec_COVID==1]*(1-V[Infec_COVID==1])),size=1, n=sum(Infec_COVID))
  #mean(W[Infec==1|Infec_COVID==1]) #9%
  #mean(W[Infec_COVID==1]) #27%
  #mean(W[Infec==1]) #2%
  #mean(W[Infec_COVID==1&V==1]) #8%

  #hospitalization, only possible if symptoms present
  H=rep(0,popsize)
  H[W==1]<-rbinom(prob=plogis(1.5+0.5*C[W==1]+log(OR_H)*V[W==1]-0.5*U1[W==1]),size=1,n=sum(W==1))
  #mean(H[W==1]) #83% with severe symptoms go to hospital

  Y.1 <- H*Infec_COVID; Y.0 <- H.0*Infec_COVID.0;
  dat.cf<-as.data.frame(cbind(Infec_COVID.1=Infec_COVID,Infec.1=Infec,H.1=H,W.1=W,
                              Infec_COVID.0=Infec_COVID.0,Infec.0=Infec.0,H.0=H.0,W.0=W.0,Y.1=Y.1,Y.0=Y.0,C=C))

  # observed outcome
  V<-rbinom(prob=plogis(0.5+0.3*C),size=1,n=popsize)
  #Y <- Y.1*V + Y.0*(1 - V)
  #Infection (with something) has some common risk factors U1 and C
  Infec<-rbinom(prob=plogis(0.5*C-5+0.5*U1),size=1,n=popsize) #current prevalence around 0.007

  #Infected with COVID
  Infec_COVID<- rbinom(prob=plogis( 1-log(OR_C)*V -6 + C+em*V*C+log(3)*U2*(1.5-V)-2*U1), size=1,n=popsize) #0.009

  #symptoms based on infection
  #can come from either or both infections, if present
  W=rep(0,popsize)
  W[Infec==1]<-rbinom(prob=plogis(-4+0.5*C[Infec==1]-log(OR_WI)*V[Infec==1]-0.5*U1[Infec==1]),size=1, n=sum(Infec==1))
  W[Infec_COVID==1]<-rbinom(prob=plogis(-2+1*C[Infec_COVID==1]-log(OR_WC)*V[Infec_COVID==1]-1*U1[Infec_COVID==1]+0.5*U2[Infec_COVID==1]*(1-V[Infec_COVID==1])),size=1, n=sum(Infec_COVID))
  #mean(W[Infec==1|Infec_COVID==1]) #9%
  #mean(W[Infec_COVID==1]) #27%
  #mean(W[Infec==1]) #2%
  #mean(W[Infec_COVID==1&V==1]) #8%

  #hospitalization, only possible if symptoms present
  H=rep(0,popsize)
  H[W==1]<-rbinom(prob=plogis(1.5+0.5*C[W==1]+log(OR_H)*V[W==1]-0.5*U1[W==1]),size=1,n=sum(W==1))
  #mean(H[W==1]) #83% with severe symptoms go to hospital

  #selection on outcome for testing (does not condition on infectious status, just being in the hospital)
  R<-sample(which(H==1),ssize) #sample randomly from those in hospital to control the study size
  dat.ob<-as.data.frame(cbind(Y=Infec_COVID,V=V,C=C)[R,])

  return(list(dat.ct = dat.cf, dat.ob = dat.ob))
}


dat <- datagen()
pseudodat <- dat$dat.ct
pseudodat$pseudo <- pseudodat$Y.1 - pseudodat$Y.0
summary(pseudodat$pseudo)
sum(pseudodat$pseudo == 1)
sum(pseudodat$pseudo == -1)

# What is the truth CATE?
# Oracle estimator of CATE.
smoothed <- smooth.spline(pseudodat$C, pseudodat$pseudo)
predict(smoothed)$y
# Plot the original data and the smoothed spline
plot(pseudodat$C, pseudodat$pseudo, main = "Smoothing Spline Example", xlab = "X", ylab = "Y")
lines(smoothed, col = "red")

# regression
glmpseudo <- glm(pseudodat$pseudo ~ pseudodat$C, family = "gaussian")
yglm <- predict(glmpseudo,type="response")
plot(dat$dat.ct$C, yglm, col = "green")
lines(smoothed, col = "red")

# glm regression.
mod.1 <- glm(Y.1 ~ C, family = binomial, data = pseudodat)
mod.0 <- glm(Y.0 ~ C, family = binomial, data = pseudodat)
tao.glm <- predict(mod.1, type = "link") - predict(mod.0, type = "link")
plot(pseudodat$C, tao.glm)

library(gam)
gam_1 <- gam(Y.1 ~ C, family = binomial, data = pseudodat)
gam_0 <- gam(Y.0 ~ C, family = binomial, data = pseudodat)
tao.gam <- predict(gam_1, type = "link") - predict(gam_0, type = "link")
plot(pseudodat$C, tao.gam)


plot(dat$dat.ct$C, yglm, col = "green")
lines(smoothed, col = "red")
lines(tao.bin, "blue")


# TND dr-learner
TNDdat <- dat$dat.ob
TNDdf_train <-TNDdat
library(hal9001);library(dplyr)
res <- element(TNDdat)
TNDDRlearner <- function(TNDdat, res){
  A.1 <- ((1 - TNDdat$Y)*(TNDdat$V - res$g1))/(res$g1* (1 -res$mu1))
  A.0 <- ((1 - TNDdat$Y)*((1-TNDdat$V) - res$g0))/(res$g0* (1 - res$mu0))
  psi.1 <- TNDdat$Y*TNDdat$V/res$g1 - res$mu1*A.1
  summary((1 - res$mu0))
  psi.0 <- TNDdat$Y*(1-TNDdat$V)/res$g0 - res$mu0*A.0
  pseudo.dr <- psi.1-psi.0
  summary(pseudo.dr)
  smoothed <- smooth.spline(TNDdat$C, pseudo.dr)
  return(list(est = pseudo.dr, result = smoothed, Pred = predict(smoothed)$y))
}
reshat <- TNDDRlearner(TNDdat, res)


plot(pseudodat$C, pseudodat$pseudo, main = "Smoothing Spline Example", xlab = "X", ylab = "Y")
lines(smoothed, col = "red")
plot(reshat$result, col = "blue")
